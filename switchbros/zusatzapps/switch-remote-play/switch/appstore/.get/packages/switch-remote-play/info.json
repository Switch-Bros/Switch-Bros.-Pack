{
  "title": "switch-remote-play",
  "author": "Moehammered",
  "category": "tool",
  "version": "1.0.0",
  "url": "https://github.com/Moehammered/switch-remote-play/releases",
  "license": "GPLv3",
  "description": "Let the switch remotely play PC games",
  "details": "Let the switch remotely play PC games (similar to steam link or remote play)\\n\\nFor instructions, please see the instructions folder in the repo.\\n\\nThis project is inspired by the github project In-Home-Switching and SkyNX. The goal is to make a convenient streamer/client application to be used to remote play PC games on the switch.\\n\\nIn-Home-Switching and SkyNX already offer the ability to do so, however there were some convenience features missing that I wanted to add. I also recently was studying multi-threading and when I saw the code, I thought 'this is the perfect chance to try writing it in C++'.\\n\\nNote\\nThe video stream is CPU dependent as at the moment it uses the ffmpeg option of hwaccel auto which usually results in ffmpeg picking CPU for the screen capture process. In my initial prototyping phase I found choosing the AMD GPU option for ffmpeg led to inconsistent stream results. I will look at making the hwaccel option configurable in the future but for now just keep in mind CPU is important.\\n\\nIf you're playing a game that is CPU intensive then there's a high chance the stream will have skips or hiccups. If your CPU is weak, then it'll be hard for it to produce and push the frames quick enough.\\n\\nFor my PC, when I play Nier Automata there are no hiccups and I can get near 60 fps depending on the stream settings (1280 x 720 desktop res, and 5mb/s bitrate). But when I tried playing RE3 2020 at 30 or 56fps I was getting hiccups and skips. So please keep this in mind.\\n\\nFeatures\\n No system crashing when going to sleep (stream will disconnect though and application is closeable)\\n Desktop application to host remote connection stream\\n Stream input from the switch to remote connection\\n Stream audio from remote connection to the switch\\n Automatically connect switch and PC stream applications\\n Automatically mute PC when audio is streaming to the Switch\\n Allow manual configuration of switch to PC connection\\n Configure stream settings from switch\\n Disconnect / Reconnect stream at will\\n Toggle Input Mode to Mouse\\n Toggle Input Mode to DS4(PS4) controller\\n Toggle Input Mode to Xbox controller\\nSwitch-Project\\nThis project consists of an application written for the switch that will decode stream data received from FFMPEG and send its input to an application to emulate a controller. The rendering is done with SDL2 and the project is written in C++.\\n\\nTested on:\\n\\nAtmosphere 0.14.1 - FW 10.1.0 (switch-remote-play 0.7.2)\\nAtmosphere 0.16.2 - FW 10.1.0 (switch-remote-play 0.7.2)\\nWindows-Project\\nThis project consists of an application written for Windows that will launch an FFMPEG stream to encode and send data. The application, after launching the FFMPEG stream, will then listen to receive input data and emulate a controller via the ViGEm Client SDK. The ViGEm Client SDK expects the ViGEm Bus Kernel Driver to be installed on the machine in order to work. For more info on the kernel driver code see the ViGEmBus github page. For the driver installation, see the ViGEmBus Releases page.\\n\\nThe Windows project is also written in C++ and uses Winsock to do socket communication with the switch application.\\n\\nTested on:\\n\\nWindows 10 64 bit\\nRyzen 5 2600 3.4GHz\\nAMD Radeon RX 5600 XT 6GB\\n16GB RAM\\nKnown Issues\\nStream Performance\\nThe stream performance is heavily dependent on network connectivity and your PC CPU performance. Configuration settings will need to be played with the find what works well with your network + PC environment.\\n\\nI recommend playing with the 'Encoder Preset' and 'Quality Control Factor' values while keeping bitrate at 8192 or less.\\n\\nGeneral tips\\nPreset value controls how the encoder should work: ultrafast means the encoder performs to get the image out as fast as possible ignoring quality, and veryslow means the encoder can take its time to preserve image quality.\\nCodec value can help performance however I have tested both the AMF and standard h264 and don't notice much of a difference.\\nQuality control factor is what controls how good the image should be. The lower the value the harder your PC must work to maintain quality. (this value and 'Preset' are what will dictate your CPU's workload)\\nFor more info see the ffmpeg documentation.\\nConfig examples\\nGreat image quality config:\\nPreset - veryslow\\nQuality control factor - less than 10 (0 = perfect image)\\nBitrate - around 5000 - 8000\\nVsync Mode - variable frame rate\\nLatency oriented config:\\nPreset - ultrafast\\nQuality control factor - 20+\\nBitrate - around 5000\\nVsync Mode - variable frame rate\\nI haven't tested all configuration combinations (and these are dependent on my PC specs), so if you find one that works great please feel free to send it to me with your PC specs and network environment configuration :)\\n\\nRare crash when opening some homebrew apps\\nThe crash issue in v0.7.2 has been found and patched. (it was due to the network discovery feature not being shutdown correctly) The app still crashes however it is harder to reproduce now and I haven't found a proper 100% way to reproduce the crash yet. The current crashing issue is rare and only crashes hbloader/hbmenu when opening an app after streaming for a certain while. I can't reproduce it but it's gone for now. If anyone figures out how to reproduce the crash, please let me know.",
  "changelog": "1.0.0\\n\\nhttps://github.com/Moehammered/switch-remote-play/releases/tag/v1.0.0\\n\\n0.9.0-pc-audio-patch\\n\\nPC Host Application Changes\\n\\n0.9.0\\n\\nhttps://github.com/Moehammered/switch-remote-play/releases/tag/0.9.0\\n\\n0.8.3\\n\\nConfiguration Options\\nBroadcast Address added as a configuration option. The PC application will display the broadcast address to be added to the switch application's config file. Adding it will allow automatic network discovery to work when pressing the 'L' button.\\nWithout this option being specified it will default to 192.168.0.255. If you do not specify your broadcast address in the config file then you will have to use Manual IP Mode.\\nManual IP Mode Enabled option is now stored in the config file. This will allow users to now be able to just press 'R' once the application opens to connect without having to go to the manual IP mode screen and press 'enabled'.\\nThis release is a stepping stone towards more diagnostic info. I had other plans for this release but I had a fair few issues reported, with the controller issue being very high priority.\\n\\n\\n\\n0.8.1-mac\\n\\nhttps://github.com/Moehammered/switch-remote-play/releases/tag/v0.8.1-Mac"
}